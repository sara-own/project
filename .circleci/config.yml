version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
         type: string      
    steps:
    - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        
          
  revert-migrations:
   description: Revert the last migration
   parameters:
     workflow_id:
        type: string      
   steps:
    - run:
        name: Revert migrations
        when: on_fail
        command: |
            # Your Memstash or kvdb.io GET URL code goes here
            # Example: Memstash.io
            SUCCESS=$(curl -H "token:migration_${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            # Example: kvdb.io
            #SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
          
  scan-frontend:
    docker:
       - image: circleci/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: run front audit
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
       - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: run backend audit
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan 
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |            
                    yum -y install sudo
                    yum -y install tar
                    yum -y install gzip
                    yum install -y curl
                    yum -y update upgrade
      - run:
          name: create back-end infrastructure 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"       
      - run:
          name: create front-end infrastructure 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - run:
          name: Add back-end publicIP created to ansible inventory
          command: | 
             cd .circleci/ansible
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
              cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
           at: ~/
      - add_ssh_keys:
           fingerprints: ["c3:3a:a8:ad:e9:15:3b:bf:59:92:46:de:50:be:55:3d"]
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible 
             apk add --update tar                        
             apk add --update gzip 
             apk add --update nodejs
             apk add --update npm 
             apk add --update curl
             pip3 install --upgrade pip 
             pip install awscli 
      - run:
          name: Configure server using playbook
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - revert-migrations
      
      
  run-migrations:
    docker:
       - image: circleci/node:13.8.0 
    steps:
      - checkout
      - attach_workspace:  
         at: ~/ 
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to memstash.io
          command: |   
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
             curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
             fi
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              # curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'             
      - destroy-environment
      - revert-migrations
    
  deploy-frontend:
    docker:
      - image: amazon/aws-cli # Docker image here that supports AWS CLI
    steps:
      - checkout
      - attach_workspace:
           at: ~/
      - run:
          name: Install dependencies
          command: |   
              yum -y install tar 
              yum -y install gzip
      - run:
          name: Install dependencies2
          command: |
            yum -y install sudo
            yum install -y curl
            sudo yum install -y nodejs
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            pip3 install --upgrade pip 
            pip install awscli 
            npm install
      - attach_workspace:
           at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend         
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
        - image: python:3.7-alpine3.11 # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys: 
           fingerprints: ["c3:3a:a8:ad:e9:15:3b:bf:59:92:46:de:50:be:55:3d"]
      - attach_workspace:
          at: ~/   
      - run:
          name: Install archiving dependencies 
          command: |   
                    apk add --update tar
                    apk add --update gzip 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl 
            apk add --update rsync 
            apk add --update openssh
            apk add --update nodejs
            apk add --update npm 
            apk add --update unzip
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version 
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .    
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
     
     
  smoke-test:
    docker:
      - image: python3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update curl 
            apk add --update rsync 
            apk add --update curl
            apk add --update openssh
            apk add --update openssh-client 
            pip3 install --upgrade pip 
            pip install awscli 
            aws --version 
      - run:
          name: Get backend url
          command: |
           export API_URL="http://${BACKEND_IP}:3030"
           echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
             if curl "${API_URL}/api/status" | grep "ok"
             then
             return 0
             else
             return 1
             fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
             # Change this to 0 after the job fails
            return 1
            else
            return 1
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar
            apk add --update gzip
            apk add --update curl 
            apk add --update rsync 
            apk add --update curl
            apk add --update openssh
            apk add --update openssh-client 
            pip3 install --upgrade pip 
            pip install awscli 
      - run:
          name: Get old workflow id
          command: |
                    Old_Workflow_ID=$(aws cloudformation list-exports \
                    --query "Exports[?Name=='WorkflowID'].Value" \
                    --no-paginate \
                    --output text > ./.circleci/CloudFormation/Old_Workflow_ID.txt)
                    declare -x Old_Workflow_ID
                    echo "${Old_Workflow_ID}" | cat
                    cat .circleci/CloudFormation/Old_Workflow_ID.txt
                    pwd
                    ls -la
                    
      - run:
          name: Get old stack
          command: |
                    list_old_stack=$(aws cloudformation list-stacks \
                    --region us-east-1 \
                    --query 'StackSummaries[].[StackName,StackStatus]' \
                    --output text | egrep -v 'CREATE_FAILED| CREATE_COMPLETE| UPDATE_COMPLETE| DELETE_FAILED| ROLLBACK_FAILED' \
                    > ./.circleci/CloudFormation/Old_Stack.txt
                    declare -x list_old_stack
                    echo "${list_old_stack}" | cat
                    cat .circleci/CloudFormation/Old_Stack.txt            
                    pwd
                    ls -la          
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Get New workflow id
          command: |
                    New_Workflow_ID=$(aws cloudformation list-exports \
                    --query "Exports[?Name=='WorkflowID'].Value" \
                    --no-paginate \
                    --output text > ./.circleci/CloudFormation/New_Workflow_ID.txt)
                    declare -x New_Workflow_ID
                    echo "${New_Workflow_ID}" | cat
                    cat .circleci/CloudFormation/New_Workflow_ID.txt
                    pwd
                    ls -la             
      - destroy-environment
      - revert-migrations
      

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
           # Fetch the Old workflow ID
           export OldWorkflowID=$(aws cloudformation \
           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
           --no-paginate --output text)
           echo OldWorkflowID: "${OldWorkflowID}"
           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
           # Fetch the stack names          
           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
           --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
           echo Stack names: "${STACKS[@]}"          
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
   default:
     jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

          
     
